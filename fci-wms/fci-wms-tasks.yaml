---
- name: Include vars
  ansible.builtin.include_vars: vars.yaml

- name: Install the latest version of podman
  package:
    name: podman
    state: latest

- name: show podman version
  shell: podman --version

- name: Install the latest version of aardvark-dns
  package:
    name: aardvark-dns
    state: latest

- name: Install the latest version of uidmap
  package:
    name: uidmap
    state: latest

- name: Install the latest version of slirp4netns
  package:
    name: slirp4netns
    state: latest

- name: Create a podman network
  containers.podman.podman_network:
    name: pytroll_network

- name: Create install directory
  file:
    path: "{{ install_dir }}"
    state: directory
    mode: '0777'

# Install and run postgis

- name: Create pg-data directory
  file:
    path: "{{ install_dir }}/pg-data"
    state: directory
    #mode: '0777'

- name: install the init sql
  template:
    src: init.sql
    dest: "{{ install_dir }}"
  register: init_sql

- name: Pull the postgis image
  containers.podman.podman_image:
    name: docker.io/postgis/postgis:latest
  register: postgis_image

- name: Should the container be restarted?
  ansible.builtin.debug:
    msg: "{{ (postgis_image.changed or init_sql.changed) | bool }}"

- name: Restart postgis
  containers.podman.podman_container:
    name: postgis-fci
    image: docker.io/postgis/postgis:latest
    state: started
    force_restart: "{{ (postgis_image.changed or init_sql.changed) | bool }}"
    mount:
      - "type=bind,source={{ install_dir }}/pg-data/,target=/var/lib/postgresql/data"
      - "type=bind,source={{ install_dir }}/init.sql,target=/docker-entrypoint-initdb.d/init.sql"
    secrets:
      - pgpassword,type=env,target=POSTGRES_PASSWORD
    rm: true
    network: pytroll_network
  register: postgis_pod

## Install and run db-sync

- name: Create mapfile directory
  file:
    path: "{{ map_dir }}"
    state: directory
    mode: '0755'

- name: Touch mapfile
  file:
    path: "{{ map_dir }}/mapfile_layers.map"
    state: touch
    mode: u=rw,g=r,o=r

- name: Update the trollflow2 configuration
  git:
    repo: https://github.com/nordsat/ewc-config.git
    dest: "{{ install_dir }}/config"
  register: git_config_results
  failed_when:
    - git_config_results.failed
    - not 'Local modifications exist in repository' in git_config_results.msg

- name: install the db-sync config file
  template:
    src: db-sync.yaml
    dest: "{{ install_dir }}"
  register: dbsync_config

- name: Pull the db-sync image
  containers.podman.podman_image:
    name: docker.io/mraspaud/db-sync:main
  register: dbsync_image

- name: Should the container be restarted?
  ansible.builtin.debug:
    msg: "{{ (dbsync_image.changed or dbsync_config.changed or git_config_results.changed) | bool }}"

- name: Restart db-sync
  containers.podman.podman_container:
    name: db-sync-fci
    image: docker.io/mraspaud/db-sync:main
    state: started
    force_restart: "{{ (dbsync_image.changed or dbsync_config.changed or git_config_results.changed) | bool }}"
    mount:
      - "type=bind,source={{ input_dir }},target=/mnt/output/"
      - "type=bind,source={{ map_dir }},target=/usr/local/bin/db-sync/output/"
      - "type=bind,source={{ install_dir }}/config/config_fci_nc/trollflow2.yaml,target=/etc/trollflow2.yaml"
      - "type=bind,source={{ install_dir }}/db-sync.yaml,target=/etc/db-sync.yaml"
    secrets:
      - pgpassword,type=env,target=POSTGRES_PASSWORD
    # rm: true
    network: pytroll_network
  register: dbsync_pod


# ## Install and run mapserver

- name: copy the mapfile demo file
  copy:
    src: mapserver-demo.map
    dest: "{{ install_dir }}"
  register: mapfile_template

- name: Pull the mapserver image
  containers.podman.podman_image:
    name: docker.io/camptocamp/mapserver:latest
  register: mapserver_image

- name: Should the container be restarted?
  ansible.builtin.debug:
    msg: "{{ (mapserver_image.changed or mapfile_template.changed) | bool }}"

- name: Restart mapserver
  containers.podman.podman_container:
    name: mapserver-fci
    image: docker.io/camptocamp/mapserver:latest
    state: started
    force_restart: "{{ (mapserver_image.changed or mapfile_template.changed) | bool }}"
    mount:
      - "type=bind,source={{ install_dir }}/mapserver-demo.map/,target=/etc/mapserver/mapserver.map"
      - "type=bind,source={{ map_dir }}/mapfile_layers.map,target=/etc/mapserver/mapfile_pytroll_layers.map"
      - "type=bind,source={{ input_dir }},target=/mnt/output"
    secrets:
      - pgpassword,type=env,target=POSTGRES_PASSWORD
    env:
      MS_MAPFILE: /etc/mapserver/mapserver.map

    rm: true
    publish: 8999:80
    network: pytroll_network
  register: mapserver_pod
